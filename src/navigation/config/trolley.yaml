amcl:
  ros__parameters:
    use_sim_time: true
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 2.0         # INCREASED for stability
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

bt_navigator:
  ros__parameters:
    use_sim_time: true
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    transform_tolerance: 2.0         # INCREASED for stability
    navigators: ['navigate_to_pose', 'navigate_through_poses']
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
    default_nav_to_pose_bt_xml: "/opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    default_nav_through_poses_bt_xml: "/opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml"

# controller_server:
#   ros__parameters:
#     use_sim_time: true
#     controller_frequency: 10.0       # REDUCED for stability
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     failure_tolerance: 0.5           # INCREASED tolerance
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugins: ["general_goal_checker"]
#     controller_plugins: ["FollowPath"]

#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.3  # ADJUSTED for robot size
#       movement_time_allowance: 20.0  # INCREASED time allowance
    
#     general_goal_checker:
#       stateful: true
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.3         # INCREASED for easier goal reaching
#       yaw_goal_tolerance: 0.5        # INCREASED for easier goal reaching
    
#     # DWB parameters for your large robot
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: false  
#       min_vel_x: -0.3              # ALLOW REVERSE MOTION
#       min_vel_y: 0.0
#       max_vel_x: 0.8               # REASONABLE speed for large robot
#       max_vel_y: 0.0
#       max_vel_theta: 1.0           # CONSERVATIVE rotation
#       min_speed_xy: 0.0
#       max_speed_xy: 0.8            # MATCH max_vel_x
#       min_speed_theta: 0.0
#       acc_lim_x: 1.5               # SMOOTH acceleration
#       acc_lim_y: 0.0
#       acc_lim_theta: 2.0           # SMOOTH rotation
#       decel_lim_x: -1.5            # MATCH acc_lim_x
#       decel_lim_y: 0.0
#       decel_lim_theta: -2.0        # MATCH acc_lim_theta
#       vx_samples: 20
#       vy_samples: 0
#       vtheta_samples: 20
#       sim_time: 2.0                # REASONABLE simulation time
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 2.0     # INCREASED tolerance
#       xy_goal_tolerance: 0.3       # MATCH goal checker
#       trans_stopped_velocity: 0.25
#       short_circuit_trajectory_evaluation: true
#       stateful: true
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 0.02     # MODERATE obstacle avoidance
#       PathAlign.scale: 32.0
#       PathAlign.forward_point_distance: 0.1
#       GoalAlign.scale: 24.0
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 32.0
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 32.0
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0

# LOCAL COSTMAP - Sized for your robot
local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: true
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 8                     # LARGER for big robot
      height: 8                    # LARGER for big robot
      resolution: 0.05
      # CORRECTED: Actual robot size from URDF (0.8m x 0.6m) + safety margin
      footprint: "[[0.5, 0.35], [0.5, -0.35], [-0.5, -0.35], [-0.5, 0.35]]"
      plugins: ["obstacle_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: true
          marking: true
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          inf_is_valid: false
          clearing_timeout: 5.0
          marking_timeout: 0.0
      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0        # INCREASED for more conservative paths
        inflation_radius: 0.6           # INCREASED for safety (robot width/2 + margin)
      
      always_send_full_costmap: true

# GLOBAL COSTMAP - Properly sized
global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: true
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      resolution: 0.05
      track_unknown_space: true
      # CORRECTED: Same footprint as local costmap
      footprint: "[[0.5, 0.35], [0.5, -0.35], [-0.5, -0.35], [-0.5, 0.35]]"
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
        transform_tolerance: 2.0   # INCREASED tolerance
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: true
          marking: true
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          inf_is_valid: false
          clearing_timeout: 5.0
          marking_timeout: 0.0
      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0        # MATCH local costmap
        inflation_radius: 0.6           # MATCH local costmap
      
      always_send_full_costmap: true

# ALSO UPDATE CONTROLLER FOR BETTER PATH FOLLOWING
controller_server:
  ros__parameters:
    use_sim_time: true
    controller_frequency: 10.0       # REDUCED for stability
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.5           # INCREASED tolerance
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.4  # INCREASED for robot size
      movement_time_allowance: 20.0  # INCREASED time allowance
    
    general_goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.4         # INCREASED for easier goal reaching
      yaw_goal_tolerance: 0.5        # INCREASED for easier goal reaching
    
    # DWB parameters for your large robot
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: false  
      min_vel_x: -0.3              # ALLOW REVERSE MOTION
      min_vel_y: 0.0
      max_vel_x: 0.6               # REDUCED speed for safety
      max_vel_y: 0.0
      max_vel_theta: 0.8           # REDUCED rotation speed
      min_speed_xy: 0.0
      max_speed_xy: 0.6            # MATCH max_vel_x
      min_speed_theta: 0.0
      acc_lim_x: 1.0               # REDUCED acceleration for smoothness
      acc_lim_y: 0.0
      acc_lim_theta: 1.5           # REDUCED rotation acceleration
      decel_lim_x: -1.0            # MATCH acc_lim_x
      decel_lim_y: 0.0
      decel_lim_theta: -1.5        # MATCH acc_lim_theta
      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 20
      sim_time: 2.0                # REASONABLE simulation time
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 2.0     # INCREASED tolerance
      xy_goal_tolerance: 0.4       # MATCH goal checker
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: true
      stateful: true
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.1      # INCREASED obstacle avoidance scale
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

planner_server:
  ros__parameters:
    use_sim_time: true
    expected_planner_frequency: 10.0  # REDUCED for stability
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5               # REASONABLE tolerance
      use_astar: true              # CHANGED to A* for better paths
      allow_unknown: true

behavior_server:
  ros__parameters:
    use_sim_time: true
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 2.0       # INCREASED tolerance
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    use_sim_time: true
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: true
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: true
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [0.6, 0.0, 0.8]    # MATCH controller velocities
    min_velocity: [-0.6, 0.0, -0.8]
    max_accel: [1.0, 0.0, 1.5]       # MATCH controller acceleration
    max_decel: [-1.0, 0.0, -1.5]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0